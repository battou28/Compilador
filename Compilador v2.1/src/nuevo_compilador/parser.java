
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 09 13:20:44 CST 2013
//----------------------------------------------------

package nuevo_compilador;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 09 13:20:44 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\002\000\002\005\003\000\002\005\003" +
    "\000\002\042\007\000\002\043\011\000\002\030\003\000" +
    "\002\030\003\000\002\004\006\000\002\031\003\000\002" +
    "\031\002\000\002\010\004\000\002\011\005\000\002\011" +
    "\002\000\002\012\023\000\002\013\004\000\002\013\002" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\015\005\000\002\016\013\000\002" +
    "\014\004\000\002\014\002\000\002\006\004\000\002\006" +
    "\002\000\002\017\015\000\002\033\003\000\002\033\003" +
    "\000\002\034\005\000\002\034\002\000\002\021\005\000" +
    "\002\021\002\000\002\020\006\000\002\020\002\000\002" +
    "\007\005\000\002\007\010\000\002\007\007\000\002\007" +
    "\013\000\002\007\011\000\002\007\006\000\002\007\007" +
    "\000\002\007\010\000\002\035\004\000\002\035\002\000" +
    "\002\036\005\000\002\037\003\000\002\037\014\000\002" +
    "\040\003\000\002\040\003\000\002\022\004\000\002\023" +
    "\004\000\002\023\002\000\002\041\004\000\002\041\005" +
    "\000\002\041\004\000\002\041\007\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\007\000\002\024\007\000\002\024" +
    "\004\000\002\024\005\000\002\024\003\000\002\025\004" +
    "\000\002\025\002\000\002\026\005\000\002\026\002\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\004\007\011\ufffe\001\002\000\004\002" +
    "\314\001\002\000\004\011\022\001\002\000\006\004\007" +
    "\011\ufffe\001\002\000\004\010\011\001\002\000\006\007" +
    "\ufff5\070\016\001\002\000\010\005\ufff2\007\ufff2\070\ufff2" +
    "\001\002\000\010\005\013\007\ufff4\070\ufff4\001\002\000" +
    "\004\010\014\001\002\000\010\005\ufff3\007\ufff3\070\ufff3" +
    "\001\002\000\004\007\017\001\002\000\004\007\ufff6\001" +
    "\002\000\006\004\ufff7\011\ufff7\001\002\000\004\011\uffff" +
    "\001\002\000\012\010\ufffd\011\ufffd\012\ufffd\024\ufffd\001" +
    "\002\000\004\010\230\001\002\000\012\010\ufffc\011\ufffc" +
    "\012\ufffc\024\ufffc\001\002\000\004\011\026\001\002\000" +
    "\004\002\000\001\002\000\004\010\027\001\002\000\004" +
    "\023\030\001\002\000\004\012\031\001\002\000\004\013" +
    "\032\001\002\000\004\014\033\001\002\000\004\015\034" +
    "\001\002\000\004\021\035\001\002\000\004\016\036\001" +
    "\002\000\004\017\037\001\002\000\004\020\040\001\002" +
    "\000\004\010\041\001\002\000\004\022\042\001\002\000" +
    "\004\023\043\001\002\000\016\010\051\023\050\032\045" +
    "\034\046\035\052\046\053\001\002\000\004\005\223\001" +
    "\002\000\004\021\214\001\002\000\004\021\210\001\002" +
    "\000\004\024\206\001\002\000\020\010\051\023\050\024" +
    "\uffe5\032\045\034\046\035\052\046\053\001\002\000\010" +
    "\005\uffcd\017\156\042\157\001\002\000\004\005\054\001" +
    "\002\000\004\005\uffce\001\002\000\006\036\056\040\055" +
    "\001\002\000\004\021\151\001\002\000\004\005\057\001" +
    "\002\000\004\037\060\001\002\000\004\021\061\001\002" +
    "\000\024\010\072\021\067\044\062\046\071\050\064\051" +
    "\063\052\073\053\074\054\065\001\002\000\046\005\uffc5" +
    "\006\uffc5\007\uffc5\017\uffc5\020\uffc5\022\uffc5\030\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\001\002\000\046\005" +
    "\uffc3\006\uffc3\007\uffc3\017\uffc3\020\uffc3\022\uffc3\030\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\001\002\000\046" +
    "\005\uffc4\006\uffc4\007\uffc4\017\uffc4\020\uffc4\022\uffc4\030" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\001\002\000" +
    "\046\005\uffbc\006\uffbc\007\uffbc\017\uffbc\020\uffbc\022\uffbc" +
    "\030\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002" +
    "\000\004\022\147\001\002\000\024\010\072\021\067\044" +
    "\062\046\071\050\064\051\063\052\073\053\074\054\065" +
    "\001\002\000\046\005\127\006\132\007\uffca\017\133\020" +
    "\uffca\022\uffca\030\uffca\055\113\056\120\057\131\060\125" +
    "\061\123\062\116\063\117\064\121\065\122\066\115\067" +
    "\130\001\002\000\046\005\uffc1\006\uffc1\007\uffc1\017\uffc1" +
    "\020\uffc1\022\uffc1\030\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\001\002\000\046\005\uffc2\006\uffc2\007\uffc2\017" +
    "\uffc2\020\uffc2\022\uffc2\030\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\067\uffc2\001\002\000\006\010\076\041\077\001\002" +
    "\000\024\010\072\021\067\044\062\046\071\050\064\051" +
    "\063\052\073\053\074\054\065\001\002\000\046\005\uffbe" +
    "\006\uffbe\007\uffbe\017\uffbe\020\uffbe\022\uffbe\030\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\066\uffbe\067\uffbe\001\002\000\004\021" +
    "\103\001\002\000\004\017\100\001\002\000\024\010\072" +
    "\021\067\044\062\046\071\050\064\051\063\052\073\053" +
    "\074\054\065\001\002\000\004\020\102\001\002\000\046" +
    "\005\uffc0\006\uffc0\007\uffc0\017\uffc0\020\uffc0\022\uffc0\030" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002\000" +
    "\026\010\072\021\067\022\uffba\044\062\046\071\050\064" +
    "\051\063\052\073\053\074\054\065\001\002\000\006\022" +
    "\uffb8\030\110\001\002\000\004\022\106\001\002\000\046" +
    "\005\uffbf\006\uffbf\007\uffbf\017\uffbf\020\uffbf\022\uffbf\030" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002\000" +
    "\004\022\uffbb\001\002\000\024\010\072\021\067\044\062" +
    "\046\071\050\064\051\063\052\073\053\074\054\065\001" +
    "\002\000\006\022\uffb8\030\110\001\002\000\004\022\uffb9" +
    "\001\002\000\024\010\uffb7\021\uffb7\044\uffb7\046\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\001\002\000\046" +
    "\005\uffcc\006\uffcc\007\uffcc\017\uffcc\020\uffcc\022\uffcc\030" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\001\002\000" +
    "\024\010\uffad\021\uffad\044\uffad\046\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\001\002\000\024\010\uffb1\021" +
    "\uffb1\044\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\001\002\000\024\010\uffb0\021\uffb0\044\uffb0\046" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\001\002" +
    "\000\024\010\uffb6\021\uffb6\044\uffb6\046\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\001\002\000\024\010\uffaf" +
    "\021\uffaf\044\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\001\002\000\024\010\uffae\021\uffae\044\uffae" +
    "\046\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\001" +
    "\002\000\024\010\uffb2\021\uffb2\044\uffb2\046\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\001\002\000\046\005" +
    "\127\006\132\007\uffca\017\133\020\uffca\022\uffca\030\uffca" +
    "\055\113\056\120\057\131\060\125\061\123\062\116\063" +
    "\117\064\121\065\122\066\115\067\130\001\002\000\024" +
    "\010\uffb3\021\uffb3\044\uffb3\046\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\001\002\000\024\010\072\021\067" +
    "\044\062\046\071\050\064\051\063\052\073\053\074\054" +
    "\065\001\002\000\006\010\136\047\137\001\002\000\024" +
    "\010\uffac\021\uffac\044\uffac\046\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\001\002\000\024\010\uffb4\021\uffb4" +
    "\044\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\001\002\000\024\010\uffb5\021\uffb5\044\uffb5\046\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\001\002\000" +
    "\024\010\072\021\067\044\062\046\071\050\064\051\063" +
    "\052\073\053\074\054\065\001\002\000\004\020\135\001" +
    "\002\000\046\005\uffc8\006\uffc8\007\uffc8\017\uffc8\020\uffc8" +
    "\022\uffc8\030\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\001\002\000\004\021\140\001\002\000\046\005\uffc7\006" +
    "\uffc7\007\uffc7\017\uffc7\020\uffc7\022\uffc7\030\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000\026\010\072" +
    "\021\067\022\uffba\044\062\046\071\050\064\051\063\052" +
    "\073\053\074\054\065\001\002\000\004\022\142\001\002" +
    "\000\046\005\uffc6\006\uffc6\007\uffc6\017\uffc6\020\uffc6\022" +
    "\uffc6\030\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\001" +
    "\002\000\046\005\uffc9\006\uffc9\007\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\030\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9" +
    "\001\002\000\046\005\uffcb\006\uffcb\007\uffcb\017\uffcb\020" +
    "\uffcb\022\uffcb\030\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\001\002\000\004\022\146\001\002\000\046\005\uffbd" +
    "\006\uffbd\007\uffbd\017\uffbd\020\uffbd\022\uffbd\030\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000\004\007" +
    "\150\001\002\000\024\010\uffd8\023\uffd8\024\uffd8\027\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\046\uffd8\001\002\000" +
    "\004\044\152\001\002\000\004\022\153\001\002\000\004" +
    "\007\154\001\002\000\024\010\uffd7\023\uffd7\024\uffd7\027" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\046\uffd7\001\002" +
    "\000\004\042\177\001\002\000\024\010\072\021\067\044" +
    "\062\046\071\050\064\051\063\052\073\053\074\054\065" +
    "\001\002\000\024\010\072\021\161\044\062\046\071\050" +
    "\064\051\063\052\073\053\074\054\065\001\002\000\004" +
    "\007\uffd0\001\002\000\024\010\164\021\067\044\062\046" +
    "\071\050\064\051\063\052\073\053\074\054\065\001\002" +
    "\000\004\007\163\001\002\000\024\010\uffd6\023\uffd6\024" +
    "\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\046\uffd6" +
    "\001\002\000\040\005\uffc2\006\uffc2\017\uffc2\022\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\004\035" +
    "\166\001\002\000\004\005\167\001\002\000\004\043\170" +
    "\001\002\000\004\005\171\001\002\000\004\045\172\001" +
    "\002\000\004\021\173\001\002\000\004\022\174\001\002" +
    "\000\004\007\uffcf\001\002\000\004\020\176\001\002\000" +
    "\004\042\uffd1\001\002\000\024\010\072\021\161\044\062" +
    "\046\071\050\064\051\063\052\073\053\074\054\065\001" +
    "\002\000\004\007\201\001\002\000\024\010\uffd5\023\uffd5" +
    "\024\uffd5\027\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\046" +
    "\uffd5\001\002\000\004\024\205\001\002\000\022\010\051" +
    "\023\050\024\uffe5\027\uffe5\032\045\034\046\035\052\046" +
    "\053\001\002\000\006\024\uffe6\027\uffe6\001\002\000\024" +
    "\010\uffdb\023\uffdb\024\uffdb\027\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\046\uffdb\001\002\000\004\024\207\001\002" +
    "\000\004\002\ufff1\001\002\000\024\010\072\021\067\044" +
    "\062\046\071\050\064\051\063\052\073\053\074\054\065" +
    "\001\002\000\004\022\212\001\002\000\016\010\051\023" +
    "\050\032\045\034\046\035\052\046\053\001\002\000\024" +
    "\010\uffd9\023\uffd9\024\uffd9\027\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\046\uffd9\001\002\000\024\010\072\021\067" +
    "\044\062\046\071\050\064\051\063\052\073\053\074\054" +
    "\065\001\002\000\004\022\216\001\002\000\016\010\051" +
    "\023\050\032\045\034\046\035\052\046\053\001\002\000" +
    "\024\010\uffd2\023\uffd2\024\uffd2\027\uffd2\032\uffd2\033\220" +
    "\034\uffd2\035\uffd2\046\uffd2\001\002\000\016\010\051\023" +
    "\050\032\045\034\046\035\052\046\053\001\002\000\024" +
    "\010\uffda\023\uffda\024\uffda\027\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\046\uffda\001\002\000\024\010\uffd3\023\uffd3" +
    "\024\uffd3\027\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\046" +
    "\uffd3\001\002\000\004\010\224\001\002\000\004\021\225" +
    "\001\002\000\026\010\072\021\067\022\uffba\044\062\046" +
    "\071\050\064\051\063\052\073\053\074\054\065\001\002" +
    "\000\004\022\227\001\002\000\024\010\uffd4\023\uffd4\024" +
    "\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\046\uffd4" +
    "\001\002\000\010\023\232\025\234\026\231\001\002\000" +
    "\004\010\ufff8\001\002\000\012\010\245\011\022\012\244" +
    "\024\uffef\001\002\000\004\010\235\001\002\000\004\010" +
    "\ufff9\001\002\000\004\023\236\001\002\000\012\010\245" +
    "\011\022\012\244\024\uffef\001\002\000\012\010\uffeb\011" +
    "\uffeb\012\uffeb\024\uffeb\001\002\000\012\010\uffec\011\uffec" +
    "\012\uffec\024\uffec\001\002\000\012\010\uffee\011\uffee\012" +
    "\uffee\024\uffee\001\002\000\004\024\311\001\002\000\012" +
    "\010\245\011\022\012\244\024\uffef\001\002\000\006\010" +
    "\253\014\252\001\002\000\004\010\247\001\002\000\012" +
    "\010\uffed\011\uffed\012\uffed\024\uffed\001\002\000\004\007" +
    "\250\001\002\000\026\010\uffea\011\uffea\012\uffea\023\uffea" +
    "\024\uffea\027\uffea\032\uffea\034\uffea\035\uffea\046\uffea\001" +
    "\002\000\004\010\274\001\002\000\004\010\uffe2\001\002" +
    "\000\006\010\uffe3\021\254\001\002\000\006\010\256\022" +
    "\uffde\001\002\000\004\022\265\001\002\000\004\010\257" +
    "\001\002\000\006\022\uffdc\030\260\001\002\000\004\010" +
    "\262\001\002\000\004\022\uffdf\001\002\000\004\010\263" +
    "\001\002\000\006\022\uffdc\030\260\001\002\000\004\022" +
    "\uffdd\001\002\000\004\023\266\001\002\000\020\010\245" +
    "\023\uffe7\024\uffe7\032\uffe7\034\uffe7\035\uffe7\046\uffe7\001" +
    "\002\000\022\010\245\023\uffe7\024\uffe7\027\uffe7\032\uffe7" +
    "\034\uffe7\035\uffe7\046\uffe7\001\002\000\020\010\051\023" +
    "\050\024\uffe5\032\045\034\046\035\052\046\053\001\002" +
    "\000\004\024\272\001\002\000\012\010\uffe9\011\uffe9\012" +
    "\uffe9\024\uffe9\001\002\000\022\010\uffe8\023\uffe8\024\uffe8" +
    "\027\uffe8\032\uffe8\034\uffe8\035\uffe8\046\uffe8\001\002\000" +
    "\004\021\275\001\002\000\006\010\256\022\uffde\001\002" +
    "\000\004\022\277\001\002\000\004\023\300\001\002\000" +
    "\022\010\245\023\uffe7\024\uffe7\027\uffe7\032\uffe7\034\uffe7" +
    "\035\uffe7\046\uffe7\001\002\000\022\010\051\023\050\024" +
    "\uffe5\027\uffe5\032\045\034\046\035\052\046\053\001\002" +
    "\000\006\024\uffe0\027\304\001\002\000\004\024\307\001" +
    "\002\000\024\010\072\021\067\044\062\046\071\050\064" +
    "\051\063\052\073\053\074\054\065\001\002\000\004\007" +
    "\306\001\002\000\004\024\uffe1\001\002\000\012\010\uffe4" +
    "\011\uffe4\012\uffe4\024\uffe4\001\002\000\004\024\ufff0\001" +
    "\002\000\012\010\ufffa\011\ufffa\012\ufffa\024\ufffa\001\002" +
    "\000\004\024\313\001\002\000\012\010\ufffb\011\ufffb\012" +
    "\ufffb\024\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\010\005\023\042\020\043\022\001\001" +
    "\000\006\003\017\004\005\001\001\000\004\010\007\001" +
    "\001\000\004\031\014\001\001\000\004\011\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\046\040\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\201" +
    "\007\202\040\043\001\001\000\004\036\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\065\024\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\144\024\067\001\001\000\010" +
    "\023\113\027\125\041\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\074\024\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\100\024\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\103\024\067\025\104\001" +
    "\001\000\004\026\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\110\024\067\001" +
    "\001\000\004\026\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\143\027" +
    "\125\041\123\001\001\000\002\001\001\000\006\022\142" +
    "\024\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\133\024\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\103\024\067\025\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\174\024\067\001\001\000\010\022" +
    "\157\024\067\037\161\001\001\000\002\001\001\000\006" +
    "\022\144\024\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\157\024\067\037" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\203\007\202\040\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\210\024\067\001\001\000\002\001" +
    "\001\000\006\007\212\040\043\001\001\000\002\001\001" +
    "\000\006\022\214\024\067\001\001\000\002\001\001\000" +
    "\006\007\216\040\043\001\001\000\004\035\220\001\001" +
    "\000\006\007\221\040\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\103\024\067\025\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\232\001\001\000\002\001\001" +
    "\000\022\005\236\013\311\015\240\016\245\017\237\032" +
    "\242\042\020\043\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\236\013\241\015" +
    "\240\016\245\017\237\032\242\042\020\043\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\236\013\307\015\240\016\245" +
    "\017\237\032\242\042\020\043\022\001\001\000\004\033" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\267\015\266\001\001\000\006\014\272\015\266" +
    "\001\001\000\010\006\270\007\202\040\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\300\015\266\001\001\000\010" +
    "\006\301\007\202\040\043\001\001\000\004\034\302\001" +
    "\001\000\002\001\001\000\006\022\304\024\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        public static  ArrayList error_parser=new ArrayList();
        public static  ArrayList regla=new ArrayList();

	Scanner scanner;
	
	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	}

	public String errores(int sys)
	{
		if (sys == 2)
			return("_import");
		else if (sys == 3)
			return("_punto");
		else if (sys == 4)
			return("_asterisco");
		else if (sys == 5)
			return("_puntoycoma");
		else if (sys == 6)
			return("_id");
		else if (sys == 7)
			return("_class");
		else if (sys == 8)
			return("_public");
		else if (sys == 9)
			return("_static");
		else if (sys == 10)
			return("_void");
		else if (sys == 11)
			return("_main");
		else if (sys == 12)
			return("_TString");
		else if (sys == 13)
			return("_cuadradoizq");
		else if (sys == 14)
			return("_cuadradoder");
		else if (sys == 15)
			return("_redondoizq");
		else if (sys == 16)
			return("_redondoder");
		else if (sys == 17)
			return("_corcheteizq");
		else if (sys == 18)
			return("_corcheteder");
		else if (sys == 19)
			return("_extends");
		else if (sys == 20)
			return("_implements");
		else if (sys == 21)
			return("_return");
		else if (sys == 22)
			return("_coma");
		else if (sys == 23)
			return("_boolean");
		else if (sys == 24)
			return("_if");
		else if (sys == 25)
			return("_else");
		else if (sys == 26)
			return("_while");
		else if (sys == 27)
			return("_System");
		else if (sys == 28)
			return("_out");	
		else if (sys == 29)
			return("_println");
		else if (sys == 30)
			return("_exit");
		else if (sys == 31)
			return("_TInt");
		else if (sys == 32)
			return("_igual");
		else if (sys == 33)
			return("_in");
		else if (sys == 34)
			return("_numero");
		else if (sys == 35)
			return("_read");
		else if (sys == 36)
			return("_this");
		else if (sys == 37)
			return("_length");
		else if (sys == 38)
			return("_true");
		else if (sys == 39)
			return("_false");
		else if (sys == 40)
			return("_new");
		else if (sys == 41)
			return("_negacion");
		else if (sys == 42)
			return("_String");
		else if (sys == 43)
			return("_suma");
		else if (sys == 44)
			return("_resta");
		else if (sys == 45)
			return("_division");
		else if (sys == 46)
			return("_diferentea");
		else if (sys == 47)
			return("_iguala");
		else if (sys == 48)
			return("_menorque");
		else if (sys == 49)
			return("_menorigual");
		else if (sys == 50)
			return("_mayorigual");
		else if (sys == 51)
			return("_mayorque");
		else if (sys == 52)
			return("_or");
		else if (sys == 53)
			return("_and");
		else if (sys == 54)
			return("_puntoasterisco");
		else 
			return("error");
	}

	public void syntax_error(Symbol cur_token2)
	{
                if (cur_token.sym == 2)
                        report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 3)
			report_error("No se esperaba un Punto", cur_token2);
		else if (cur_token.sym == 4)
			report_error("No se esperaba un Asterisco", cur_token2);
		else if (cur_token.sym == 5)
			report_error("No se esperaba un Punto y coma", cur_token2);
		else if (cur_token.sym == 6)
			report_error("No se esperaba un ID", cur_token2);
		else if (cur_token.sym == 7)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 8)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 9)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 10)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 11)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 12)
			report_error("No se esperaba un Tipo String", cur_token2);
		else if (cur_token.sym == 13)
			report_error("No se esperaba un Parentesis Abierto", cur_token2);
		else if (cur_token.sym == 14)
			report_error("No se esparaba un Parentesis Cerrado", cur_token2);
		else if (cur_token.sym == 15)
			report_error("No se esperaba un Parentesis Abierto", cur_token2);
		else if (cur_token.sym == 16)
			report_error("No se esperaba un Parentesis Cerrado", cur_token2);
		else if (cur_token.sym == 17)
			report_error("No se esperaba un Parentesis Abierto", cur_token2);
		else if (cur_token.sym == 18)
			report_error("No se esperaba un Parentesis Cerrado", cur_token2);
		else if (cur_token.sym == 19)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 20)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 21)
			report_error("No se esperaba un Return", cur_token2);
		else if (cur_token.sym == 22)
			report_error("No se esparaba una Coma", cur_token2);
		else if (cur_token.sym == 23)
			report_error("No se esperaba un Boolean", cur_token2);
		else if (cur_token.sym == 24)
			report_error("No se esperaba un IF", cur_token2);
		else if (cur_token.sym == 25)
			report_error("No se esperaba un ELSE", cur_token2);
		else if (cur_token.sym == 26)
			report_error("No se esperaba un WHILE", cur_token2);
		else if (cur_token.sym == 27)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 28)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 29)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 30)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 31)
			report_error("No se esperaba un Tipo Entero", cur_token2);
		else if (cur_token.sym == 32)
			report_error("No se esperaba un Igual", cur_token2);
		else if (cur_token.sym == 33)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 34)
			report_error("No se esperaba un Numero", cur_token2);
		else if (cur_token.sym == 35)
			report_error("No se esparaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 36)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 37)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 38)
			report_error("No se esperaba un TRUE", cur_token2);
		else if (cur_token.sym == 39)
			report_error("No se esperaba un FALSE", cur_token2);
		else if (cur_token.sym == 40)
			report_error("No se esperaba una Palabra Reservada", cur_token2);
		else if (cur_token.sym == 41)
			report_error("No se esparaba una Negacion", cur_token2);
		else if (cur_token.sym == 42)
			report_error("No se esperaba un STRING", cur_token2);
		else if (cur_token.sym == 43)
			report_error("No se esperaba una Suma", cur_token2);
		else if (cur_token.sym == 44)
			report_error("No se esperaba una Resta", cur_token2);
		else if (cur_token.sym == 45)
			report_error("No se esperaba una Division", cur_token2);
		else if (cur_token.sym == 46)
			report_error("No se esperaba un Diferente A", cur_token2);
		else if (cur_token.sym == 47)
			report_error("No se esperaba un Igual A", cur_token2);
		else if (cur_token.sym == 48)
			report_error("No se esperaba un Menor Que", cur_token2);
		else if (cur_token.sym == 49)
			report_error("No se esperaba un Menor Igual", cur_token2);
		else if (cur_token.sym == 50)
			report_error("No se esperaba un Mayor Igual", cur_token2);
		else if (cur_token.sym == 51)
			report_error("No se esperaba un Mayor Que", cur_token2);
		else if (cur_token.sym == 52)
			report_error("No se esperaba un OR", cur_token2);
		else if (cur_token.sym == 53)
			report_error("No se esperaba un AND", cur_token2);
		else if (cur_token.sym == 54)
			report_error("No se esperaba un Punto Asterisco", cur_token2);
		else 
			report_error("Error: ", cur_token2);
	
	}

	public void report_error(String message, Object info) {
	   StringBuffer m = new StringBuffer("Error ");
	
	   if (info instanceof java_cup.runtime.Symbol) {
	     m.append( "(" + errores(cur_token.sym) +")" );
	     m.append(" en fila "+ cur_token.left + " columna " + cur_token.right );
	     
	     if (((java_cup.runtime.Symbol)info).value != null)
	       m.append(". Lexema: " + cur_token.value.toString());
	     
	   }
	   m.append(" : "+message);
	   m.append(" y en su lugar viene " + ((java_cup.runtime.Symbol)info).value.toString()+"\n");

           error_parser.add(m);
	   System.out.println(m);
	}

   
	public void report_fatal_error(String message, Object info) 	{
		report_error(message, info);
		throw new RuntimeException("Error Fatal de Sintaxis!!!");
  	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Op ::= _and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Op ::= _or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Op ::= _mayorque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Op ::= _mayorigual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Op ::= _menorigual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Op ::= _menorque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Op ::= _iguala 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Op ::= _diferentea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Op ::= _division 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Op ::= _asterisco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Op ::= _resta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Op ::= _suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpLists ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpLists",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpLists ::= _coma Exp ExpLists 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpLists",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpList ::= Exp ExpLists 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp_Simpl ::= _String 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp_Simpl ::= _redondoizq Exp _redondoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp_Simpl ::= _negacion Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp_Simpl ::= _new _id _redondoizq ExpList _redondoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp_Simpl ::= _new _TInt _cuadradoizq Exp _cuadradoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp_Simpl ::= _this 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp_Simpl ::= _id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp_Simpl ::= _false 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp_Simpl ::= _true 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp_Simpl ::= _numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_Simpl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // regla13 ::= _punto _id _redondoizq ExpList _redondoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // regla13 ::= _punto _length 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // regla13 ::= _cuadradoizq Exp _cuadradoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // regla13 ::= Op Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr_Int ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr_Int",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr_Int ::= regla13 Expr_Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr_Int",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp ::= Exp_Simpl Expr_Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // regla12 ::= _id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // regla12 ::= _this 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // regla11 ::= _redondoizq _id _redondoder _System _punto _in _punto _read _redondoizq _redondoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // regla11 ::= Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // regla10 ::= _cuadradoizq Exp _cuadradoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // regla9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // regla9 ::= _else Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= regla12 _punto _id _redondoizq ExpList _redondoder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= _id regla10 _igual regla11 _puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= _id _igual regla11 _puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= _System _punto _exit _redondoizq _numero _redondoder _puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= _System _punto _out _punto _println _redondoizq Exp _redondoder _puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= _while _redondoizq Exp _redondoder Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= _if _redondoizq Exp _redondoder Statement regla9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= _corcheteizq Statements _corcheteder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalLists ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalLists",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalLists ::= _coma _id _id FormalLists 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalLists",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormalList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalList ::= _id _id FormalLists 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regla8 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // regla8 ::= _return Exp _puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // regla7 ::= _void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // regla7 ::= _id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDecl ::= _public regla7 _id _redondoizq FormalList _redondoder _corcheteizq VarDecls Statements regla8 _corcheteder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statements ::= Statement Statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecls ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecls ::= VarDecl VarDecls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ConstrDecl ::= _public _id _redondoizq FormalList _redondoder _corcheteizq VarDecls Statements _corcheteder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDecl ::= _id _id _puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // regla6 ::= ClassDecls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // regla6 ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // regla6 ::= ConstrDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // regla6 ::= VarDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BodyDecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BodyDecl ::= regla6 BodyDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MainClass ::= _class _id _corcheteizq _public _static _void _main _redondoizq _TString _cuadradoizq _cuadradoder _id _redondoder _corcheteizq Statement _corcheteder _corcheteder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeNames ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeNames",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeNames ::= TypeNames _punto _id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeNames",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeName ::= _id TypeNames 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // regla5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // regla5 ::= _puntoasterisco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ImportDecl ::= _import TypeName regla5 _puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // regla4 ::= _implements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // regla4 ::= _extends 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassEIDeclaration ::= _class _id regla4 _id _corcheteizq BodyDecl _corcheteder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassEIDeclaration",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDeclaration ::= _class _id _corcheteizq BodyDecl _corcheteder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecls ::= ClassEIDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDecls ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportDecls ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportDecls ::= ImportDecl ImportDecls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ImportDecls ClassDecls MainClass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

